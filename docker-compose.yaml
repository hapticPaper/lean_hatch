services:
  db:
    image: postgres:15
    container_name: hatchapp_postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password # Tells Postgres to read password from this file
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" # Change host port to 5433
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - pg_password
    networks:
      - hatch-network

  # sms-handler:
  #   build:
  #     context: ./sms-handler
  #   container_name: hatchapp_sms_listener
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     FLASK_API_URL: http://host.docker.internal:5000/api/v1/messages/webhook/twilio
  #     PORT: 3000
  #   networks:
  #     - hatch-network

  # mongo:
  #   image: mongo:latest
  #   container_name: hatchapp_mongo
  #   restart: always
  #   env_file:
  #     - .env 
  #   ports:
  #     - "27019:27017"  # Map host port 27019 to container port 27017 
  #   volumes:
  #     - mongo_data:/data/db
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER} # Loaded from .env via env_file
  #     MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password # Password from Docker secret
  #   secrets:
  #     - mongo_password
  #   networks:
  #     - hatch-network

  # influxdb:
  #   image: influxdb:2.7
  #   container_name: hatchapp_influxdb
  #   restart: always
  #   ports:
  #     - "8087:8086" # Change host port to 8087
  #   volumes:
  #     - influxdb_data:/var/lib/influxdb2
  #   environment:
  #     DOCKER_INFLUXDB_INIT_MODE: setup
  #     DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USER}
  #     DOCKER_INFLUXDB_INIT_PASSWORD: /run/secrets/influx_password # Initial setup password
  #     DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORGANIZATION}
  #     DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
  #     DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE: /run/secrets/influx_token
  #     # Skip permission checks to avoid errors with mounted volumes
  #     DOCKER_INFLUXDB_BOLT_PATH: /var/lib/influxdb2/influxd.bolt
  #     DOCKER_INFLUXDB_ENGINE_PATH: /var/lib/influxdb2/engine
  #     DOCKER_INFLUXDB_CONFIG_PATH: /etc/influxdb2
  #   secrets:
  #     - influx_token
  #     - influx_password
  #   networks:
  #     - hatch-network

  # nginx:
  #   image: nginx:latest
  #   container_name: hatchapp_nginx
  #   restart: always
  #   ports:
  #     - "80:80" # Expose Nginx on standard HTTP port 80
  #   expose:
  #     - "80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   networks:
  #     - hatch-network


  # mongo-express:
  #   image: mongo-express:latest
  #   container_name: hatchapp_mongo_express
  #   restart: always
  #   ports:
  #     - "8082:8081"  # Change host port to 8082
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongo
  #     ME_CONFIG_MONGODB_PORT: "27017"  # Use internal container port
  #     ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
  #     ME_CONFIG_MONGODB_AUTH_USERNAME: ${MONGO_USER} # From .env
  #     ME_CONFIG_MONGODB_AUTH_PASSWORD_FILE: /run/secrets/mongo_password # Reads from the Docker secret
  #     # Optional: Add basic authentication for Mongo Express UI itself
  #     # ME_CONFIG_BASICAUTH_USERNAME: your_express_admin_user
  #     # ME_CONFIG_BASICAUTH_PASSWORD: your_express_admin_password
  #   env_file:
  #     - .env # To load MONGO_USER
  #   secrets:
  #     - mongo_password # Makes the 'mongo_password' secret (defined at top level) available
  #   depends_on:
  #     - mongo
  #   networks:
  #     - hatch-network

# Top-level secrets definition
secrets:
  pg_password:
    file: ./.secrets/POSTGRES_PASSWORD
  mongo_password:
    file: ./.secrets/MONGO_PASSWORD
  influx_token:
    file: ./.secrets/INFLUX_TOKEN
  influx_password:
    file: ./.secrets/INFLUXDB_PASSWORD

volumes:
  pgdata:
  mongo_data:
  influxdb_data:

networks:
  hatch-network:
    driver: bridge
      